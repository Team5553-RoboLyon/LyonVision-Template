plugins {
  id "edu.wpi.first.GradleRIO" version "2019.4.1"
  id "google-test-test-suite"
  id "cpp"
}
toolchainsPlugin.withRaspbian()

deploy {
  targets {
    target('coprocessor') {
      directory = '/home/vision'
      locations {
        // Change this if you've changed the target hostname, username or password.
        ssh {
          address = 'pi5553.local'
          user = 'vision'
          password = '5553'
        }
      }
    }
  }

  artifacts {
    nativeArtifact('vision') {
      targetPlatform = wpi.platforms.raspbian
      targets << 'coprocessor'
      component = 'VisionProgram'
      buildType = 'release'

      predeploy << { execute('sudo systemctl stop vision || true') }
      // Make sure we can run our program!
      postdeploy << { execute('chmod +x VisionProgram'); execute('sudo systemctl restart vision || true') }
    }

    // Copy data/ folder in the program's working directory
    fileTreeArtifact('visionData') {
      targets << 'coprocessor'
      files = fileTree(dir: 'src/')

      predeploy << {
        // Copy src/data/ directory in /home/vision
        execute('sudo cp -r $(pwd)/data /home/vision')
      }
    }

    // System configs : install systemd service and configure ssh
    fileTreeArtifact('visionResources') {
      targets << 'coprocessor'
      files = fileTree(dir: 'resources')

      postdeploy << { 
        // Install a symlink for the service so the system can run it! A symlink is like a pointer for files
        execute('sudo ln -sf $(pwd)/system/vision.service /etc/systemd/system')

        // Reload the system services and start our vision service.
        execute('sudo systemctl daemon-reload; sudo systemctl restart vision')

        // Enable our vision service on startup
        execute('sudo systemctl enable vision')

        // Configure the SSH server (to allow X forwarding)
        execute('sudo cp $(pwd)/system/sshd_config /etc/ssh/sshd_config')
      }
    }

    // Store all the libraries in /home/vision/libraries, that way we don't poison /usr/local.
    withType(jaci.gradle.deploy.artifact.BinaryLibraryArtifact) {
      directory = '/home/vision/libraries'
      predeploy << {
        execute("sudo mkdir -p ${directory} && sudo chmod -R 777 ${directory}/..")
        // Make sure the system can find our libraries!
        execute("echo ${directory} | sudo tee /etc/ld.so.conf.d/vision.conf")
      }

      // Refresh the system's cache of known libraries, so ours can be found
      postdeploy << { execute('sudo ldconfig') }
    }
  }
}

model {
  components {
    VisionProgram(NativeExecutableSpec) {
      targetPlatform wpi.platforms.desktop
      targetPlatform wpi.platforms.raspbian

      sources.cpp {
        source {
          srcDir 'src'
          include '**/*.cpp'
          exclude 'test'
        }
        exportedHeaders {
          srcDir 'src'
          include '**/*.h'
          exclude 'test'
        }
      }

      binaries.all {
        if (targetPlatform.name == wpi.platforms.desktop) {
          cppCompiler.define '__DESKTOP__'
          if (targetPlatform.operatingSystem.isLinux()) {
            linker.args << '-lusb-1.0'
          }
        }
      }

      useLibrary(it, 'opencv', "wpilib")
    }
  }
  testSuites {
    VisionProgramTest(GoogleTestTestSuiteSpec) {
      testing $.components.VisionProgram

      sources.cpp {
        source {
          srcDir 'src/test/cpp'
          include '**/*.cpp'
        }
      }

      useLibrary(it, 'opencv', 'wpilib', 'googletest')
    }
  }
}

// Copie du dossier Data/ dans le dossier ou se trouve le programme Windows
task copyData(type: Copy) {
  from 'src/data'
  into "build/install/VisionProgram/${wpi.platforms.desktop}/debug/lib/data"
}

// La copie doit être executée après l'installation du programme (sinon le dossier est effacé)
copyData.mustRunAfter "installVisionProgram${wpi.platforms.desktop.capitalize()}DebugExecutable"

task runVision(dependsOn: ["simulateVisionProgram${wpi.platforms.desktop.capitalize()}DebugExecutable", "copyData"])
